package com.hungdoan.aquariux.common.id_generator;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Random;

abstract class BaseIdGenerator {

    private static final String ALPHA;

    static {
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        ALPHA = upper + upper.toLowerCase();
    }

    private static final String ALPHANUMERIC = ALPHA + "0123456789";

    protected BaseIdGenerator() {
    }

    /**
     * @return new SecureRandom initialized with (hopefully) unique seed
     */
    protected final Random newRandom() {
        StringBuilder seed = new StringBuilder(2000);
        seed.append(LocalDateTime.now().toInstant(ZoneOffset.UTC).toEpochMilli());
        seed.append(System.nanoTime());
        seed.append(Integer.toHexString(System.identityHashCode(this)));
        seed.append(Integer.toHexString(System.identityHashCode(seed)));
        seed.append(Integer.toHexString(System.identityHashCode(new Object())));
        return new SecureRandom(seed.toString().getBytes());
    }

    /**
     * Append a random upper or lower case ASCII alphabetic character to the string builder
     *
     * @param random number generator
     * @param bld    string builder to append to
     */
    protected final void appendRandomAlpha(Random random, StringBuilder bld) {
        bld.append(ALPHA.charAt(random.nextInt(ALPHA.length())));
    }

    /**
     * Append a random upper or lower case alphabetic or numeric ASCII character to the string builder
     *
     * @param random number generator
     * @param count  of how many to append
     * @param bld    string builder to append to
     */
    protected final void appendRandomAlphanumeric(Random random, StringBuilder bld, int count) {
        for (int i = 0; i < count; i++) {
            bld.append(ALPHANUMERIC.charAt(random.nextInt(ALPHANUMERIC.length())));
        }
    }

    /**
     * @return a unique id generated by this generator
     */
    abstract String getId();

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{}";
    }
}